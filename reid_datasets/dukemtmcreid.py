import glob, re
import os.path as osp
from .base_dataset import BaseDataset

class DukeMTMCreID(BaseDataset):

    """DukeMTMC-reID.
    Reference:
        - Ristani et al. Performance Measures and a Data Set for Multi-Target,
            Multi-Camera Tracking. ECCVW 2016.
        - Zheng et al. Unlabeled Samples Generated by GAN Improve the Person
            Re-identification Baseline in vitro. ICCV 2017.
    URL: `<https://github.com/layumi/DukeMTMC-reID_evaluation>`_

    Dataset statistics:
        - identities: 1404 (train + query).
        - images:16522 (train) + 2228 (query) + 17661 (gallery).
        - cameras: 8.
    """

    def __init__(self, root, dirname='DukeMTMC-reID', subdirnames= \
                 {'train':'bounding_box_train','query':'query','gallery':'bounding_box_test'}, \
                 verbose=True):
        super().__init__(root, dirname, subdirnames, verbose)

    def _process_dir(self, dir_path, relabel=False):
        img_paths = glob.glob(osp.join(dir_path, "*.jpg"))
        pattern = re.compile(r"([-\d]+)_c(\d)")

        # get all identities
        pid_container = set()
        for img_path in img_paths:
            pid, _ = map(int, pattern.search(img_path).groups())
            if pid == -1:
                continue
            pid_container.add(pid)

        pid2label = {pid: label for label, pid in enumerate(pid_container)}

        data = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            if (pid not in pid_container) or (pid == -1):
                continue

            assert 1 <= camid <= 8
            camid -= 1

            if relabel:
                pid = pid2label[pid]
            data.append((img_path, pid, camid))

        return data
